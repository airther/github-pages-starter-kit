"use strict";(function(){var e={};e.getNodes=function(){e.nav=document.querySelector(".header__nav"),e.overlay=document.querySelector(".header__overlay"),e.hamburger=document.querySelector(".header__hamburger"),e.navToggleNode=document.querySelector(".header__nav-toggle")},e.setupListeners=function(){e.navToggleNode.addEventListener("click",e.toggleNav),e.overlay.addEventListener("click",e.toggleNav)},e.toggleNav=function(){e.nav.classList.toggle("header__nav--active"),e.overlay.classList.toggle("header__overlay--active"),e.hamburger.classList.toggle("header__hamburger--active")},e.init=function(){e.getNodes(),e.setupListeners()},document.addEventListener("DOMContentLoaded",function(){e.init()})}).call(void 0),function(){var e={};e.init=function(){var e="UA-00000000-0";!function(e,t,n,a,o,r,c){e.GoogleAnalyticsObject=o,e[o]=e[o]||function(){(e[o].q=e[o].q||[]).push(arguments)},e[o].l=1*new Date,r=t.createElement(n),c=t.getElementsByTagName(n)[0],r.async=1,r.src=a,c.parentNode.insertBefore(r,c)}(window,document,"script","//www.google-analytics.com/analytics.js","ga"),ga("create",e,"auto"),ga("send","pageview")}}.call(void 0),function(){var e={};e.getNodes=function(){e.nav=document.querySelector(".header__nav"),e.overlay=document.querySelector(".header__overlay"),e.hamburger=document.querySelector(".header__hamburger"),e.navToggleNode=document.querySelector(".header__nav-toggle")},e.setupListeners=function(){e.navToggleNode.addEventListener("click",e.toggleNav),e.overlay.addEventListener("click",e.toggleNav)},e.toggleNav=function(){e.nav.classList.toggle("header__nav--active"),e.overlay.classList.toggle("header__overlay--active"),e.hamburger.classList.toggle("header__hamburger--active")},e.init=function(){e.getNodes(),e.setupListeners()}}.call(void 0),function(){!function(){var e=[],t=new MutationObserver(function(t){t.forEach(function(t){t.addedNodes.length&&[].slice.call(t.addedNodes).forEach(function(t){e.forEach(function(e){n(t,e)&&o(t)})})})}),n=function(e,t){var n=["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector"].filter(function(t){return!!e[t]})[0];return n?e[n](t):void 0},a=function(e){var t=parseFloat(e.dataset.ratio,10),n=parseInt(window.getComputedStyle(e).width,10);e.style.height=n/t+"px"},o=function(e){var t=window.getComputedStyle(e),n=parseInt(t.width,10),o=parseInt(t.height,10),r=n/o;e.dataset.ratio=r,e.style.width="100%",e.removeAttribute("width"),e.removeAttribute("height"),a(e)},r=function(t){var n=function(){return"interactive"===document.readyState||"complete"===document.readyState||"loaded"===document.readyState};e.push(t),n()?[].slice.call(document.querySelectorAll(t)).forEach(o):document.addEventListener("readystatechange",function(){n()&&[].slice.call(document.querySelectorAll(t)).forEach(o)}),window.addEventListener("resize",function(){[].slice.call(document.querySelectorAll(t)).forEach(a)})};t.observe(document.documentElement,{subtree:!0,childList:!0}),window.fitIt=r}()}.call(void 0);
//# sourceMappingURL=data:application/json;base64,